
static class DatabaseExceptions : IEx
{
	public string Msg (Exception ex)
	{
		string ss = string.Empty;
		ex = GetLastInnerException(ex);	
		if(ex is SqlException)
		{
			SqlException sqlex = (SqlException)ex;
			//ErrorLog(sqlex); // save into DB or blah blah
			ss = Message.Msg(sqlex);
		}
		else if(ex.Source.ToUpper().equals("ENTITYFRAMEWORK"))
		{
			DbUpdateException sqlex = (DbUpdateException)ex;
			//ErrorLog(sqlex); // save into DB or blah blah
			ss = Message.Msg(sqlex);
		}
		else
		{		
			//ErrorLog(ex); // save into DB or blah blah
			ss = Message.Msg(ex);
		}
	}
}

static class Message
{
public static string Msg(Exception ex){
	string message = string.Empty;
	if(ex is SqlException)   // code move to SqlExceptionMessages
	{
		SqlException sqlex = (SqlException)ex;
		switch(sqlex.Number)
		{
			case -1:
			case 53:
				message="";
				break;
			case 2601:
			case 2627:
				message="already exisits";
				break;
			case 201:
				message="";
				break;
			default:
				message="Error Number: " + sqlex.Number + "<br/>" + "Error Message: " + 
					Globals.Utilities.CombineListOfStrings(sqlex.Message.ToString(), '\'')
					+ "<br/>" + " There is an error";
				break;
		}
	}
	else if (ex is DbUpdateException)
	{
		DbUpdateException DbUpdateEx = (DbUpdateException)ex;
		if(DbUpdateEx.InnerException.InnerException is SqlException)
		{
			message = SqlExceptionMessages(DbUpdateEx.InnerException.InnerException);
		}
	}
	else if (ex is FormatException)
		message = "there is inconsistency in data";
	else
		message ="Error Message: " + 
					Globals.Utilities.CombineListOfStrings(ex.Message.ToString(), '\'')
					+ "<br/>" + " There is an error";

	return message;
}
}

public static string CombineListOfStrings(string lst, char separator)
{
	if(lst == null || lst.length == 0)
	 return "";

	string[] split = lst.Split(new char[] {separator});
	string result = "";
	foreach(string str in split)
		result += str;

	return result;
}

private Exception GetLastInnerException(Exception ex)
{
	if(ex.InnerException == null)
		return ex;
	else
		return GetLastInnerException(ex.InnerException);
}